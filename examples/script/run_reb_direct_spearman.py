import argparse
import itertools
from scipy import stats


if __name__ == '__main__':
    # parser = argparse.ArgumentParser()
    # parser.add_argument('--truth', type=str)
    # parser.add_argument('--get', type=str)
    # parser.add_argument('--truthloss', action='store_true')
    # parser.add_argument('--getloss', action='store_true')
    #
    # args = parser.parse_args()
    #
    # truthinfo = 'Loss' if args.truthloss else 'Accuracy'
    #
    # cnt = 0
    # truth = []
    # with open(args.truth, 'r') as rfid:
    #     for line in rfid:
    #         if truthinfo in line:
    #             cnt += 1
    #             if cnt % 2:
    #                 truth.append(eval(line.split(' ')[-1]))
    #
    #
    # getinfo = 'Loss' if args.getloss else 'Accuracy'
    #
    # cnt = 0
    # get = []
    # with open(args.get, 'r') as rfid:
    #     for line in rfid:
    #         if getinfo in line:
    #             cnt += 1
    #             if cnt % 2:
    #                 get.append(eval(line.split(' ')[-1]))

    truth=[0.609658777713776,
           0.587396085262299,
           0.58808958530426,
           0.468789607286453,
           0.613551199436188,
           0.523203849792481,
           0.514082491397858,
           0.419589459896088,
           0.59360134601593,
           0.510506689548492,
           0.510333716869354,
           0.420986086130142,
           0.595780670642853,
           0.528811693191528,
           0.549400508403778,
           0.480326443910599,
           0.595443308353424,
           0.528633236885071,
           0.52276349067688,
           0.457227319478989,
           0.596164166927338,
           0.545554935932159,
           0.507927179336548,
           0.486137300729752,
           0.595281898975372,
           0.536115288734436,
           0.515996634960175,
           0.476130217313767,
           0.59568327665329,
           0.542430341243744,
           0.507333934307098,
           0.428883671760559,
           0.585028171539307,
           0.58854067325592,
           0.587396085262299,
           0.581392586231232,
           0.58854067325592,
           0.581392586231232,
           0.548581302165985,
           0.539797902107239,
           0.398541957139969,
           0.512230634689331,
           0.451151371002197,
           0.612013280391693,
           0.456433653831482,
           0.429739981889725,
           0.424209594726563,
           0.499208629131317,
           0.518061697483063,
           0.521553933620453,
           0.52875155210495,
           0.512308478355408,
           0.398991942405701,
           0.512617647647858,
           0.392542272806168,
           0.422114580869675,
           0.40775203704834,
           0.482388556003571,
           0.637443006038666,
           0.512112617492676,
           0.480615586042404,
           0.41965714097023,
           0.381993591785431,
           0.555783092975617,
           0.552567303180695,
           0.51573657989502,
           0.508081912994385,
           0.555024743080139,
           0.400362730026245,
           0.547998070716858,
           0.569926977157593,
           0.529764115810394,
           0.404637813568115,
           0.403206676244736,
           0.547092795372009,
           0.505018055438995,
           0.391770005226135,
           0.4201400578022,
           0.497700899839401,
           0.402691513299942]
    get = [0.590657353401184,
           0.527462542057037,
           0.521447837352753,
           0.378097385168076,
           0.590658903121948,
           0.489409744739532,
           0.413923889398575,
           0.349356889724731,
           0.590671598911285,
           0.489438742399216,
           0.391223222017288,
           0.339593499898911,
           0.590673863887787,
           0.489379823207855,
           0.391145825386047,
           0.335409760475159,
           0.590672731399536,
           0.489462494850159,
           0.390889286994934,
           0.33091276884079,
           0.59066653251648,
           0.489435732364655,
           0.390970140695572,
           0.330515921115875,
           0.590671837329865,
           0.489436537027359,
           0.390967696905136,
           0.331615120172501,
           0.59067177772522,
           0.489429891109467,
           0.390963822603226,
           0.32760289311409,
           0.565969109535217,
           0.528661608695984,
           0.527462542057037,
           0.513850331306458,
           0.528661608695984,
           0.513850331306458,
           0.499087005853653,
           0.52087277173996,
           0.37198007106781,
           0.491272032260895,
           0.372785866260529,
           0.576045870780945,
           0.373391836881638,
           0.36896738409996,
           0.369963794946671,
           0.41107714176178,
           0.349581062793732,
           0.491738140583038,
           0.348454624414444,
           0.482933342456818,
           0.36361825466156,
           0.390740513801575,
           0.342386692762375,
           0.342814803123474,
           0.343582034111023,
           0.342251062393189,
           0.486856549978256,
           0.488734751939774,
           0.340923935174942,
           0.369285315275192,
           0.344964772462845,
           0.416608393192291,
           0.367974787950516,
           0.388185411691666,
           0.41205444931984,
           0.411740988492966,
           0.338835686445236,
           0.486680150032043,
           0.416227579116821,
           0.342860221862793,
           0.351335883140564,
           0.336796760559082,
           0.339813470840454,
           0.399499475955963,
           0.33924463391304,
           0.34309259057045,
           0.34038308262825,
           0.344215780496597]



    # corrects = 0
    # cnt = 0
    # for comb in itertools.combinations_with_replacement(
    #         list(range(len(ground_truth_loss))), 2):
    #
    #     a = ground_truth_loss[comb[0]]
    #     b = ground_truth_loss[comb[1]]
    #     a_est = loss_all[comb[0]]
    #     b_est = loss_all[comb[1]]
    #     # if a < 0.5 or b < 0.5:
    #     #     continue
    #     cnt += 1
    #     if not (a >= b) ^ (a_est >= b_est):
    #         corrects += 1

    rho, p = stats.spearmanr(truth, get)

    print(f"spearman rho {rho}, p {p}")
